How did viewing a diff between two versions of a file help you see the bug that was introduced?

Viewing the diff helped to focus only on the lines that changed. The bug could only be in one of
these lines.


How could having easy access to the entire history of a file make you a more efficient programmer 
in the long term?

I could reuse old code that I have removed from my current version so that I do not have any unfinished
code fragments in the production version.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git,
 vs having versions automatically saved, like Google Docs does?
 
Pros: all commits are logically and code will compile
Pros: annotations for the changes are added
Cons: You might forget to commit at relevant changes


Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately?

Allowing to save multiple files in one commit makes sure that dependencies on different files still work.
This is a feature that is mainly required in software. That is the reason why it is not included in 
Google Docs.


How can you use the commands git log and git diff to view the history of files?

Git log gives an overview of the different commits including the comments.
Git diff can show the difference between two files.


How might using version control make you more confident to make changes that could break something?

Using version control will always give me the chance to return from broken code to a previously
working version.


Now that you have your workspace set up, what do you want to try using Git for?

I want to use git to track the development of my Jupyter Notebooks for deep learning.

